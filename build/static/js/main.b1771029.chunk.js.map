{"version":3,"sources":["logo.svg","components/Home.js","components/About.js","components/Message.js","components/Messages.js","App.js","registerServiceWorker.js","index.js"],"names":["Home","About","Message","match","params","id","Messages","Array","keys","map","n","to","url","path","component","render","App","className","src","logo","alt","exact","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sQAAe,MAA0B,iC,6BCS1BA,EAPF,kBACX,gCACE,sCADF,oBCMaC,EAPD,kBACZ,gCACE,uCADF,kD,QCCaC,EAFC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAe,kDAAqBA,EAAMC,OAAOC,OCsBlDC,EAlBE,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAH,OACf,gCACE,6BACG,YAAII,MAAM,GAAGC,QAAQC,KAAI,SAACC,GACzB,OACE,6BACE,eAAC,IAAD,CAAMC,GAAE,UAAKR,EAAMS,IAAX,YAAkBF,EAAI,GAA9B,qBAA4CA,EAAI,MADzCA,QAMf,eAAC,IAAD,WACE,cAAC,IAAD,CAAOG,KAAI,UAAKV,EAAMS,IAAX,cAA4BE,UAAWZ,IAClD,cAAC,IAAD,CAAOW,KAAMV,EAAMS,IAAKG,OAAQ,kBAAM,mEC4B7BC,E,4JApCb,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oBAAIH,UAAU,YAAd,iCAEF,qBAAKA,UAAU,OAAf,SACE,+BACE,+BACG,IACD,cAAC,IAAD,CAAMN,GAAG,IAAT,kBAAyB,OAE3B,+BACG,IACD,cAAC,IAAD,CAAMA,GAAG,YAAT,sBAAqC,OAEvC,+BACG,IACD,cAAC,IAAD,CAAMA,GAAG,SAAT,mBAA+B,YAIrC,qBAAKM,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOI,OAAK,EAACR,KAAK,IAAIC,UAAWd,IACjC,cAAC,IAAD,CAAOa,KAAK,YAAYC,UAAWR,IACnC,cAAC,IAAD,CAAOO,KAAK,SAASC,UAAWb,IAChC,cAAC,IAAD,CAAUU,GAAG,kB,GA7BPW,aCAZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MAAM,2DA4BnC,SAASyB,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAACC,GACNH,QAAQG,MAAM,4CAA6CA,MC5DjEC,IAAS9B,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEF+B,SAASC,eAAe,SDMX,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEP1B,EAwCV,SAAiCM,GAE/BuB,MAAMvB,GACHI,MAAK,SAACoB,GAGiB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAACC,GAClCA,EAAayB,aAAa1B,MAAK,WAC7BR,OAAOC,SAASkC,eAKpBhC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IAAI,oEA3DVmB,CAAwBhC,GAGxBD,EAAgBC,OCvBxBiC,K","file":"static/js/main.b1771029.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react'\n\nconst Home = () => (\n  <div>\n    <h2>Home</h2>\n    My Home page!\n  </div>\n)\n\nexport default Home\n","import React from 'react'\n\nconst About = () => (\n  <div>\n    <h2>About</h2>\n    This example shows how to use React Router!\n  </div>\n)\n\nexport default About\n","import React from 'react'\n\nconst Message = ({ match }) => <h3>Message with ID {match.params.id}</h3>\n\nexport default Message\n","import React from 'react'\n\nimport Message from './Message'\n\nimport { Link, Route, Switch } from 'react-router-dom'\n\nconst Messages = ({ match }) => (\n  <div>\n    <ul>\n      {[...Array(5).keys()].map((n) => {\n        return (\n          <li key={n}>\n            <Link to={`${match.url}/${n + 1}`}>Message {n + 1}</Link>\n          </li>\n        )\n      })}\n    </ul>\n    <Switch>\n      <Route path={`${match.url}/:id(\\\\d+)`} component={Message} />\n      <Route path={match.url} render={() => <h3>Please select a message</h3>} />\n    </Switch>\n  </div>\n)\n\nexport default Messages\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\n\nimport { Route, Link, Switch, Redirect } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport About from './components/About'\nimport Messages from './components/Messages'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <div className=\"menu\">\n          <ul>\n            <li>\n              {' '}\n              <Link to=\"/\">Home</Link>{' '}\n            </li>\n            <li>\n              {' '}\n              <Link to=\"/messages\">Messages</Link>{' '}\n            </li>\n            <li>\n              {' '}\n              <Link to=\"/about\">About</Link>{' '}\n            </li>\n          </ul>\n        </div>\n        <div className=\"App-intro\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/messages\" component={Messages} />\n            <Route path=\"/about\" component={About} />\n            <Redirect to=\"/\" />\n          </Switch>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n"],"sourceRoot":""}